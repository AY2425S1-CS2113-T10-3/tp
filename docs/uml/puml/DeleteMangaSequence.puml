@startuml
actor User
participant "tantou:Tantou" as tantou
participant "ui:Ui" as ui
participant "parser:Parser" as parser
participant "userCommand:AddMangaCommand" as userCommand
participant "authorList:AuthorList" as authorList
participant ":Storage" as storage
participant "deletingAuthor:Author" as deletingAuthor
participant "mangaList:MangaList" as mangaList
participant "deletingManga:Manga" as deletingManga
participant "existingAuthor:Author" as existingAuthor
participant "existingMangaList:MangaList" as existingMangaList

' Simulate command with "catalog -a Kubo Tite -m Bleach -d"
activate tantou
User -> ui: "catalog -a Kubo Tite -m Bleach -d"

' Get userInput
tantou -> ui: getUserInput()
activate ui
ui --> tantou: userInput
deactivate ui

' Get userCommand (AddAuthorCommand)
tantou -> parser: getUserCommand(userInput)
activate parser

' Self call to process userInput
parser -> parser: processCatalogCommand(userInput)

' Parser invokes constructor of AddMangaCommand
activate parser

' Construction
create userCommand
parser -> userCommand : new AddMangaCommand(argsAuthorManga)
activate userCommand
userCommand --> parser: userCommand
deactivate userCommand

' More like a return control situation since it is a self call
parser --> parser
deactivate parser
parser --> tantou: userCommand
deactivate parser

' Execute command
tantou -> userCommand: execute(ui, authorList)
activate userCommand

' Create author
create deletingAuthor
userCommand -> deletingAuthor: new Author(authorName)
activate deletingAuthor
create mangaList
deletingAuthor -> mangaList: new MangaList()
activate mangaList
mangaList --> deletingAuthor
deactivate mangaList
deletingAuthor --> userCommand: deletingAuthor
deactivate deletingAuthor

' Create Manga
create deletingManga
userCommand -> deletingManga: new Manga(mangaName)
activate deletingManga
deletingManga --> userCommand: deletingManga
deactivate deletingManga

' Control flow
alt deletingAuthor in authorList

    userCommand -> authorList: getAuthor(deletingAuthor)
    activate authorList
    authorList --> userCommand: existingAuthor
    deactivate authorList

    alt deletingManga associated with existingAuthor
        userCommand -> existingAuthor: deleteManga(deletingManga)
        activate existingAuthor
        existingAuthor -> existingMangaList: remove(deletingManga)
        activate existingMangaList
        existingMangaList --> existingAuthor
        deactivate existingMangaList
        existingAuthor --> userCommand
        deactivate existingAuthor

        userCommand -> ui: printDeleteMangaSuccess(deletingAuthor, deletingManga)
        activate ui
        ui -> User: "Manga Bleach successfully deleted from author Kubo Tite"
        ui --> userCommand
        deactivate ui

        userCommand -> storage: saveAuthorListToDataFile(authorList)
        activate storage
        storage --> userCommand
        deactivate storage
        userCommand --> tantou

    else deletingManga not associated with existingAuthor
        userCommand --> tantou: throws TantouException("Manga does not exist!")
        tantou -> ui: showErrorMessage()
        activate ui
        ui --> User: "Manga does not exist!"
        ui --> tantou
        deactivate ui
    end

else deletingAuthor not in authorList
    userCommand --> tantou: throws TantouException("Author does not exist!")
    tantou -> ui: showErrorMessage()
    activate ui
    ui --> User: "Author does not exist!"
    ui --> tantou
    deactivate ui
end
deactivate userCommand
deactivate tantou
@enduml

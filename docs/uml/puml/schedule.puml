!include .PlantUMLClass.config

@startuml

actor User
participant "tantou:Tantou" as tantou
participant "parser:Parser" as parser
participant "ui:Ui" as ui
participant "userCommand:AddDeadlineCommand" as userCommand
participant "author:Author" as author
participant "manga:Manga" as manga
participant "authorList:AuthorList" as authorList

activate tantou

User -> ui : "schedule -a Kubo Tite -m Bleach -b October 2 2018"

tantou -> ui: getUserInput()
activate ui
ui --> tantou: userInput
deactivate ui

tantou -> parser:getUserCommand(userInput)
activate parser
parser -> parser : processScheduleCommand(userInput)
activate parser
alt Author name is empty
    parser --> tantou : throws NoAuthorProvidedException()
    tantou -> ui : showErrorMessage()
    ui --> User : "You have not provided an author argument!"
else Manga name is empty
    parser --> tantou : throws NoMangaProvidedException()
    tantou -> ui : showErrorMessage()
    ui --> User : "You have not provided a manga argument!"
else Arguments are in the wrong order
    parser --> tantou : throws InvalidScheduleCommandException()
    tantou -> ui : showErrorMessage()
    ui --> User : "Invalid schedule command!"
else Deadline is empty
    parser --> tantou : throws NoDeadlineProvidedException()
    tantou -> ui : showErrorMessage()
    ui --> User : "You have not provided a deadline argument!"
else Else
    create userCommand
    parser -> userCommand : new AddDeadlineCommand(userInput)
    activate userCommand
    alt Author doesn't exist
        userCommand --> tantou : throws TantouException()
        tantou -> ui : showErrorMessage()
        ui --> User : "Author not found!"
    else Manga doesn't exist
        userCommand --> tantou : throws TantouException()
        tantou -> ui : showErrorMessage()
        ui --> User : "Manga not found!"
    else Else
        userCommand -> authorList : getAuthor(authorName)
        activate authorList
        authorList --> userCommand : author:Author
        deactivate authorList

        userCommand -> author : getManga(mangaName)
        activate author
        author --> userCommand : manga:Manga
        deactivate author

        userCommand -> manga : addDeadline(deadline)
        activate manga
        manga --> userCommand
        deactivate manga

         userCommand -> ui:printScheduleSuccess(deadline, manga)
         activate ui
            ui -> User : "Deadline [deadline] added successfully to manga [manga]"
        end
    end

@enduml